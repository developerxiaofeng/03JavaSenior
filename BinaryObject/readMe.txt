 位运算：
   2&3   3|4
   2<<2

一： 掌握计算机中的二进制          1+2=3
   01.原码
   02.反码
   03.补码
   
   
   1byte=8bit
  1
  
  0 0 0 0 0 0 0 1   2进制的1的原码 反码 补码
  0 0 0 0 0 0 0 0   2进制的0的原码 反码 补码
   
  -1
  1 0 0 0 0 0 0 1
   
   
   
   计算机中真正参与运算的是  补码！
  
  在java中所有的数字都是有符号的！  符号就是  正 0   负 1
   最高位（最左边的）的 0和1 就是 符号位
 
 
 什么是最高位？ 就是最左边的数字！
  java中最小的单位是 byte（字节）
 
  生活中我们买了一个50G的内存条！ 插入到我们的电脑中 有50G吗？？
  没有！ 因为所有的厂商都是以  1G=1000MB 来计算的！
 但是我们的电脑 是以  1G=1024MB 来计算的！所以 不足50G！
 
 
  
  
  比如说 1  在2进制中怎么表示
  
  0 0 0 0 0 0 0 1     ===》1*2的0次方 =》1
  
 3在2进制中怎么表示
  0 0 0 0 0 0 1 1     ===》1*2的0次方  +1*2的一次方  ==》3

 5在2进制中怎么表示
  0 0 0 0 0 1 0 1     ===》1*2的0次方 +0*2的1次方+1*2的2次方 ==》5 
    
 10在2进制中怎么表示
  0 0 0 0 1 0 1 0    ===》0*2的0次方 +1*2的1次方+0*2的2次方+1*2的3次方 ==》10 
 
 
  1+2 怎么运算的？
  
01.首先找到1的原码
    0 0 0 0 0 0 0 1    ==》1的2进制 补码==原码

02.首先找到2的原码
    0 0 0 0 0 0 1 0    ==》2的2进制 补码==原码

03.相加
    0 0 0 0 0 0 0 1
+   0 0 0 0 0 0 1 0 
------------------------
    0 0 0 0 0 0 1 1  ==》1*2的0次方+1*2的1次方==》3





负数在2进制中的表示
 
 
1-2 的运算方式

先找到-2的原码	 
	 1 0 0 0 0 0 1 0   现在是-2的原码 ， 不能参与运算  需要转换成反码 最后转换成补码
	  
	 1 1 1 1 1 1 0 1   转换成反码===》它的原码符号位不变+其他位取反
	 1 1 1 1 1 1 1 0  -2的补码 =反码+1  
+    0 0 0 0 0 0 0 1	 
----------------------------- 
     1 1 1 1 1 1 1 1     结果是负数！ 是补码！  补码转换成反码 反码再转换成原码
     1 1 1 1 1 1 1 0     反码 =补码-1                                                    
     1 0 0 0 0 0 0 1     原码！   ===》1*2的0次方   ==》结果 -1


4-3的运算

  先找-3的原码
  1 0 0 0 0 0 1 1     ==>-3的原码
  1 1 1 1 1 1 0 0     ==>符号位不变，其他位置取反 得到反码
  1 1 1 1 1 1 0 1     ==>补码 =反码+1 
  0 0 0 0 0 1 0 0     ==4的补码
--------------------------------
  0 0 0 0 0 0 0 1    ===>1
 

  对于有符号的数字来说：
   01.计算机运行的是补码
   02.正数和0的原码，反码，补码都一样！
   03.2进制的最高位是符号位： 0 表示正数    1 表示负数
   04.负数的反码=它的原码符号位不变+其他位取反
       因为计算机运行的是补码，所以反码还要转换成补码之后才能运算
   05.负数的补码=反码 +1
   06.在java中所有的数字都是有符号的！
   
 

二：掌握java中位运算和移位运算

 java中有4个位运算符！

01.按位与         &：  运算时，两位全为1，结果为1
    2 & 3
    运算过程
	 0 0 0 0 0 0 1 0   001.先找2的2进制表示   
&	 0 0 0 0 0 0 1 1   002.先找3的2进制表示   
---------------------------------------------    
     0 0 0 0 0 0 1 0    ==》  结果2
    
02.按位或         |：运算时，两位有一个是1，结果为1

    2 | 3
    运算过程
	 0 0 0 0 0 0 1 0   001.先找2的2进制表示   
|	 0 0 0 0 0 0 1 1   002.先找3的2进制表示   
---------------------------------------------    
     0 0 0 0 0 0 1 1    ==》  结果3

03.按位异或      ^：运算时，两位有一个是1一个是0，结果才为1！

    2 ^ 3
    运算过程
	 0 0 0 0 0 0 1 0   001.先找2的2进制表示   
^	 0 0 0 0 0 0 1 1   002.先找3的2进制表示   
---------------------------------------------    
     0 0 0 0 0 0 0 1    ==》  结果1

04.按位取反      ~： 运算时，所有的0变成1， 1变成0  （仅限于一个表达式）

 ~3
    运算过程
~	 0 0 0 0 0 0 1 1   先找3的2进制表示   
---------------------------------------------    
     1 1 1 1 1 1 0 0   原码   负数  需要转换成反码  之后再转换成 补码
     1 0 0 0 0 0 1 1   反码
     1 0 0 0 0 1 0 0   补码    ===>结果是-4
             
     
      
算术右移  :  符号位不变，地位溢出删除！ 高位补零！
  >>
  
  10 >> 1
  
  10:是需要位移的数字
  >> ：向右移动
  1：移动的位数
  
  0 0 0 0 1 0 1 0
    0 0 0 0 1 0 1 0
-----------------------
  0 0 0 0 0 1 0 1    ==》 5
  

算术左移      符号位不变，高位溢出删除！低位补零！
  <<
  
   10 << 1
   0 0 0 0 1 0 1 0
 0 0 0 0 1 0 1 0  
----------------------------  
   0 0 0 1 0 1 0 0    ==》20
  

逻辑右移     不管符号位，高位补零！
   >>>
 
 10 >>> 2  
 
 0 0 0 0 1 0 1 0
     0 0 0 0 1 0 1 0
--------------------------   
 0 0 0 0 0 0 1 0      ==> 2
   
   
   
   
   