多线程

首先需要理解  进程！

进程：  我们应用程序的执行实例！有自己独立的内存空间和系统资源！

 一个进程是由一个或者N个线程组成的！
 
线程：cpu调度和分配的基本单位！电脑中真正执行的是 线程！ 

 在同一个时间点，我们的电脑只能运行一个线程！
 
多线程：
     如果在一个进程中，同时运行多个线程，来完成不同的工作，我们称之为多线程！
     
   CPU上能同时运行多个线程吗？  不能！ 
      一个CPU在同一个时间点，只能运行一个线程，但是线程运行的速度太快，我们肉眼无法分辨
      所以我们认为是多线程！  



      
生活中进入地铁站的例子：

  场景1：现在地铁站有1个进站口，同时来了5个人旅客！
               需要排队进站！ 
  场景2：现在地铁站有5个进站口，同时来了5个人旅客！
               不需要排队进站！     
 
 哪个对我们的体验好点呢？
 哪个地铁的设计比较合理呢？

地铁站 ：CPU
进站口 ：线程


多线程的好处：
  01.充分的利用了CPU的资源
  02.给用户带来了良好的体验




实现多线程的方式：

 01.继承Thread类
 02.实现Runnable接口

Thread类   implements  Runnable接口

 Runnable接口中
 01. 只有一个方法run()
 02. 没有返回值
 03. 没有声明异常，其实现类的run（）如果出现了 异常不能声明，只能try catch
 
 
 
 
 
run()和 start()的区别：

   run()：
         01.就是一个普通的方法，称之为线程体！
         02.CPU分配给当前线程时间片的时候，run()开始执行

   start()：
         01.启动线程，不是立即执行线程！
         02.底层会默认执行run()
 
      
线程的生命周期：

    01.新生状态
       MyThreadDemo t1 = new MyThreadDemo();
    02.就绪状态
       t1.start();
    03.运行状态
       run();
    04.阻塞状态
      sleep ,yield, wait , join 
    05.死亡状态
       001.正常死亡      run()执行完毕 之后   
       002.异常死亡      run()执行过程中，出现异常退出！
         
           








      
      

